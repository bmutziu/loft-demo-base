name: create-demo-environment

# on merge to main from pull request (recommended)
on:
  workflow_dispatch:
    inputs:
      vcluster-name:
        description: "Name of vcluster to be used as demo domain prefix"
        required: true
      cluster:
        description: "Host cluster for vcluster"
        type: choice
        default: "worker-cluster-na"
        options: 
        - worker-cluster-na
        - worker-cluster-eu
      product:
        description: "Loft product to demo"
        type: choice
        default: "vcluster-pro"
        options: 
        - vcluster-pro
        - loft
        - devpod-pro
      logo:
        description: "Company logo URL to override UI"
        default: "https://www.vcluster.com/pro/docs/media/vclusterpro_orange.svg"
      template-version:
        description: "vcluster template version to use"
        default: "1.0.0"
      loft-cli-version:
        description: 'Loft CLI version to use'
        default: "v3.2.4"
env:
  LOFT_CLI_VERSION: ${{ inputs.loft-cli-version || 'v3.2.4' }}
  VCLUSTER_NAME: ${{ inputs.vcluster-name }}
  CLUSTER: ${{ inputs.cluster }}
  TEMPLATE_VERSION: ${{ inputs.template-version }}
  PRODUCT: ${{ inputs.product }}
  LOGO: ${{ inputs.logo }}
  REPO_NAME: 'hello-app-${{ inputs.vcluster-name }}'

jobs:
  create-demo-env:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
    steps:
      - id: checkout
        uses: actions/checkout@v4

      - id: install-loft-cli
        uses: loft-sh/setup-loft@v2
        with:
          version: ${{ env.LOFT_CLI_VERSION }}
          url: ${{ secrets.LOFT_URL }}
          # Specify your Loft access key here
          access-key: ${{ secrets.LOFT_SALES_DEMO_ACCESS_KEY }}
          kubectl-install: false
          kubectl-version: v1.28.2
      
      - id: set-domain
        run: |
          if [ "$CLUSTER" == "worker-cluster-na" ]
          then
            echo "BASE_DOMAIN=$VCLUSTER_NAME.us.demo.dev" >> $GITHUB_ENV
          else
            echo "BASE_DOMAIN=$VCLUSTER_NAME.eu.demo.dev" >> $GITHUB_ENV
          fi

      - id: create-demo-vcluster
        run: |
          loft create vcluster $VCLUSTER_NAME --project sales-demos --recreate \
            --template loft-demo --version $TEMPLATE_VERSION \
            --cluster $CLUSTER \
            --set loftProduct=$PRODUCT \
            --set uiLogoURL=$LOGO
          
          sed -i "s|REPLACE_BASE_DOMAIN|$BASE_DOMAIN|g" loft/projects.yaml
          sed -i "s|REPLACE_BASE_DOMAIN|$BASE_DOMAIN|g" loft/apps.yaml
          sed -i "s|LOFT_DEMO_GHCR_LOGIN_SECRET|${{ secrets.LOFT_DEMO_GHCR_LOGIN_SECRET }}|g" loft/sharedsecrets.yaml
          yq e -i ".spec.key = \"${{ secrets.LOFT_DEMO_ENV_ACCESS_KEY }}\"" loft/accesskey.yaml

          kubectl get pods -A
          
          while ! kubectl get projects.storage.loft.sh default -n loft; do
            echo "Waiting for loft default project...";
            sleep 1; 
          done
          
          kubectl apply -f ./loft -n loft
          kubectl apply -f ./loft-p-api-framework
          
          while ! kubectl get configmap argocd-rbac-cm -n argocd; do
            echo "Waiting for argocd rbac configmap...";
            sleep 1; 
          done
          
          kubectl patch configmap/argocd-rbac-cm \
            -n argocd \
            --type merge \
            -p '{"data":{"policy.default":"role:readonly"}}'

      - id: create-argocd-pr-app-set
        run: |
          sed -i "s|REPO_NAME|$REPO_NAME|g" argocd/argocd-appset.yaml
          sed -i "s|LOFT_DOMAIN|$BASE_DOMAIN|g" argocd/argocd-appset.yaml
          kubectl apply -f argocd/argocd-appset.yaml

      - id: create-argocd-app
        run: |
          kubectl create namespace $REPO_NAME --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret docker-registry ghcr-login-secret -n $REPO_NAME --docker-server=https://ghcr.io \
            --docker-username=km-demos --docker-password=${{ secrets.KM_MANAGE_PACKAGES_TOKEN }} --docker-email=km@kurtmadel.com
          yq e -i ".metadata.name = \"$REPO_NAME\"" argocd/argocd-app.yaml
          yq e -i ".spec.source.repoURL = \"https://github.com/loft-demos/$REPO_NAME.git\"" argocd/argocd-app.yaml
          yq e -i ".spec.destination.namespace = \"$REPO_NAME\"" argocd/argocd-app.yaml
          kubectl apply -f argocd/argocd-app.yaml

  create-demo-app:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    steps:
      - id: generate-githubapp-token
        uses: tibdex/github-app-token@v1.8.0
        with:
          app_id: ${{ secrets.LOFT_DEMOS_GITHUB_APP_ID }}
          private_key: ${{ secrets.LOFT_DEMOS_GITHUB_APP_KEY }}
      
      - id: set-domain
        run: |
          if [ "$CLUSTER" == "worker-cluster-na" ]
          then
            echo "BASE_DOMAIN=$VCLUSTER_NAME.us.demo.dev" >> $GITHUB_ENV
          else
            echo "BASE_DOMAIN=$VCLUSTER_NAME.eu.demo.dev" >> $GITHUB_ENV
          fi

      - id: create-echo-repo-from-template
        shell: bash
        env:
          GITHUB_TOKEN: ${{ steps.generate-githubapp-token.outputs.token }}
        run: |
          echo $BASE_DOMAIN
          gh  api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/km-demos/echo-app-template/generate \
            -f owner='loft-demos' \
            -f name="$REPO_NAME" \
            -f description='Simple ehco app to use with vCluster.Pro ArgoCD demo.' \
            -F include_all_branches=false \
            -F private=false
          echo '{"name":"web","active":true,"events":["push","release"],"config":{"url":"'"https://argocd-$BASE_DOMAIN/api/webhook"'","secret":"'"${{ secrets.ARGOCD_GITHUB_WEBHOOK_SECRET }}"'","content_type":"json","insecure_ssl":"0"}}' | gh api repos/loft-demos/$REPO_NAME/hooks --input - -X POST
          echo '{"name":"web","active":true,"events":["pull_request"],"config":{"url":"'"https://argocd-appset-$BASE_DOMAIN/api/webhook"'","secret":"'"${{ secrets.ARGOCD_GITHUB_WEBHOOK_SECRET }}"'","content_type":"json","insecure_ssl":"0"}}' | gh api repos/loft-demos/$REPO_NAME/hooks --input - -X POST

      - id: clone-repo-copy
        uses: actions/checkout@v4
        with:
          repository: km-demos/${{ env.REPO_NAME }}
          token: ${{ steps.generate-githubapp-token.outputs.token }}
          path: ${{ env.REPO_NAME }}
          ref: main

      - id: branches-prs
        shell: bash
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          cd $REPO_NAME
          ls -la
          git config --global init.defaultBranch main
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git config pull.rebase false
          git remote set-url origin https://x-access-token:$GITHUB_ACCESS_TOKEN@github.com/loft-demos/$REPO_NAME.git
          git checkout main

          sed -i "s|REPO_NAME|$REPO_NAME|g" helm-chart/Chart.yaml
          sed -i "s|REPO_NAME|$REPO_NAME|g" helm-chart/values.yaml
          sed -i "s|REPLACE_LOFT_DEMO_DOMAIN|$REPO_NAME|g" .github/workflows/create-pr-preview.yaml
          sed -i "s|REPLACE_LOFT_DEMO_DOMAIN|$REPO_NAME|g" .github/workflows/delete-pr-preview.yaml
          touch src/main.go
          git commit -am "updating values.yaml with repo name"
          git push origin main

          